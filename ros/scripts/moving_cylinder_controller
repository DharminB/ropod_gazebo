#! /usr/bin/env python

from __future__ import print_function

import tf
import math
import rospy
import signal
import sys
import yaml

from std_msgs.msg import String
from geometry_msgs.msg import Pose, Quaternion, Point
from gazebo_msgs.msg import ModelState, ModelStates
from gazebo_msgs.srv import DeleteModel, SpawnModel

class MovingCylinderController(object):

    """TODO"""

    def __init__(self):
        self._global_frame = rospy.get_param('~global_frame', "world")
        rate = rospy.get_param('~rate', 10.0)
        self._sample_time = 1.0/rate
        self._goal_dist_tolerance = rospy.get_param('~goal_dist_tolerance', 0.1)
        self._model_path = rospy.get_param('~model_path', "")
        if self._model_path == "":
            rospy.logfatal("Model path is empty")
            rospy.signal_shutdown("Model path is empty")
            return
        with open(self._model_path, "r") as f:
            model_xml = f.read()

        mc_config_file = rospy.get_param('~mc_config_file', "")
        if mc_config_file == "":
            rospy.logfatal("Moving cylinder config path is empty")
            rospy.signal_shutdown("Moving cylinder config path is empty")
            return
        with open(mc_config_file, "r") as f:
            self._mc_info = yaml.safe_load(f)
        print(self._mc_info)

        print("Waiting for gazebo spawn service...")
        rospy.wait_for_service("/gazebo/spawn_urdf_model")
        print("Wait complete")
        spawn_model = rospy.ServiceProxy("/gazebo/spawn_urdf_model", SpawnModel)

        self._orientation = Quaternion(0, 0, 0, 1)

        for i in range(len(self._mc_info)):
            self._mc_info[i]["current_pos"] = {"x": self._mc_info[i]["start_pos"]["x"],
                                               "y": self._mc_info[i]["start_pos"]["y"]}
            self._mc_info[i]["travelling_towards_end"] = True
            item_name = "mc_{0}".format(i)
            print("Spawning model:", item_name)
            item_pose = Pose(Point(x = self._mc_info[i]["start_pos"]["x"],
                                   y = self._mc_info[i]["start_pos"]["y"],
                                   z = 0.0),
                             self._orientation)
            resp = spawn_model(item_name, model_xml, "", item_pose, self._global_frame)
            print(resp.status_message)


        self._set_model_state_pub = rospy.Publisher('/gazebo/set_model_state', 
                                                    ModelState, queue_size=1)

        self._active = True
        rospy.loginfo('Initialised')

    def _delete_models(self):
        print("Waiting for gazebo delete service...")
        rospy.wait_for_service("/gazebo/delete_model")
        print("Got delete service .")
        delete_model = rospy.ServiceProxy("/gazebo/delete_model", DeleteModel)
        for i in range(len(self._mc_info)):
            item_name = "mc_{0}".format(i)
            print("Deleting model:", item_name)
            resp = delete_model(item_name)
            print(resp.status_message)

    def update(self, event):
        if not self._active:
            return
        for i in range(len(self._mc_info)):
            curr_x = self._mc_info[i]["current_pos"]["x"]
            curr_y = self._mc_info[i]["current_pos"]["y"]
            if self._mc_info[i]["travelling_towards_end"]:
                goal_x = self._mc_info[i]["end_pos"]["x"]
                goal_y = self._mc_info[i]["end_pos"]["y"]
            else:
                goal_x = self._mc_info[i]["start_pos"]["x"]
                goal_y = self._mc_info[i]["start_pos"]["y"]

            diff_x = goal_x - curr_x
            diff_y = goal_y - curr_y
            mag_diff = (diff_x**2 + diff_y**2)**0.5
            if mag_diff < self._goal_dist_tolerance:
                self._mc_info[i]["travelling_towards_end"] = not self._mc_info[i]["travelling_towards_end"]
            
            norm_diff_x = diff_x/mag_diff
            norm_diff_y = diff_y/mag_diff
            curr_x += norm_diff_x * self._mc_info[i]["vel"] * self._sample_time
            curr_y += norm_diff_y * self._mc_info[i]["vel"] * self._sample_time
            self._mc_info[i]["current_pos"]["x"] = curr_x
            self._mc_info[i]["current_pos"]["y"] = curr_y
            item_name = "mc_{0}".format(i)
            model_state_msg = ModelState(model_name = item_name,
                                         reference_frame = self._global_frame)
            model_state_msg.pose = Pose(Point(x = self._mc_info[i]["current_pos"]["x"],
                                              y = self._mc_info[i]["current_pos"]["y"],
                                              z = 0.0),
                                        self._orientation)
            self._set_model_state_pub.publish(model_state_msg)

    def sigint_handler(self, signum, frame):
        self._active = False
        rospy.logwarn("SIGINT received.")
        self._delete_models()
        rospy.signal_shutdown("SIGINT received")

if __name__ == "__main__":
    rospy.init_node('moving_cylinder_spawner')
    MCC = MovingCylinderController()
    signal.signal(signal.SIGINT, MCC.sigint_handler)
    rate = rospy.get_param('~rate', 10.0)
    rospy.Timer(rospy.Duration(1.0/rate), MCC.update)
    rospy.spin()
    rospy.loginfo("Exiting...")
