#! /usr/bin/env python

from __future__ import print_function

import tf
import math
import rospy

from std_msgs.msg import String
from gazebo_msgs.msg import ModelState

class CartManager(object):

    """TODO"""

    def __init__(self):
        self._x = rospy.get_param('~init_x', 0.0)
        self._y = rospy.get_param('~init_y', 0.0)
        self._theta = rospy.get_param('~init_theta', 0.0)
        self._global_frame = rospy.get_param('~global_frame', 'map')
        self._frame = rospy.get_param('~frame', '/cart/base_link')
        self._cart_length = rospy.get_param('~cart_length', 1.1)
        self._cart_robot_dist = rospy.get_param('~cart_robot_dist', 0.9)
        self._cart_id = rospy.get_param('~cart_id', 'cart')

        self._docked_robot = None
        self._tf_br = tf.TransformBroadcaster()
        self._tf_ls = tf.TransformListener()
        self._set_model_state_pub = rospy.Publisher('/gazebo/set_model_state', 
                                                    ModelState, queue_size=1)

        rospy.Subscriber('~docked_robot', String, self._docked_robot_cb)
        rospy.loginfo('Initialised')

    def _docked_robot_cb(self, msg):
        if msg.data == '':
            robot_pos = self._get_robot_pose_from_tf()
            if robot_pos is None:
                rospy.logwarn('Could not get robot pose. Cart transform might be incorrect')
                return
            delta_x = (math.cos(robot_pos[2]) * -self._cart_robot_dist)
            delta_y = (math.sin(robot_pos[2]) * -self._cart_robot_dist)
            self._x = robot_pos[0] + delta_x
            self._y = robot_pos[1] + delta_y
            self._theta = robot_pos[2]
            self._docked_robot = None
        else:
            self._docked_robot = msg.data
            rospy.loginfo('Docked to ' + self._docked_robot)

    def update(self):
        if self._docked_robot is not None:
            pos = [-self._cart_robot_dist, 0.0, 0.0]
            ori = [0.0, 0.0, 0.0, 1.0]
            self._tf_br.sendTransform(pos, ori, rospy.Time.now(), self._frame,
                                      self._docked_robot + '/base_link_ground')
            model_state_msg = ModelState(model_name=self._cart_id,
                                         reference_frame=self._docked_robot)
            model_state_msg.pose.position.x = - self._cart_robot_dist
            self._set_model_state_pub.publish(model_state_msg)
        else:
            pos = [self._x, self._y, 0.0]
            ori = tf.transformations.quaternion_from_euler(0.0, 0.0, self._theta)
            self._tf_br.sendTransform(pos, ori, rospy.Time.now(), self._frame, self._global_frame)

    def _get_robot_pose_from_tf(self):
        try:
            trans, rot = self._tf_ls.lookupTransform(self._global_frame,
                                                     self._docked_robot + '/base_link_ground',
                                                     rospy.Time(0))
            _, _, yaw = tf.transformations.euler_from_quaternion(rot)
            curr_pos = (trans[0], trans[1], yaw)
        except Exception as e:
            rospy.logerr(str(e))
            curr_pos = None
        return curr_pos

if __name__ == "__main__":
    rospy.init_node('cart_manager')
    CM = CartManager()
    RATE = rospy.Rate(rospy.get_param('~rate', 5.0))
    try:
        while not rospy.is_shutdown():
            RATE.sleep()
            CM.update()
    except Exception as e:
        print(str(e))
    rospy.loginfo('Exiting')

        
